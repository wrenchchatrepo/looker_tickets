looker query

https://doitpartner.cloud.looker.com/explore/looker-malloy-sources/tickets?qid=ZW4tv5RWWGjKP6JD30V7WZ

# If necessary, uncomment the line below to include explore_source.
# include: "looker-malloy-sources.model.lkml"

view: add_a_unique_name_1712076032 {
  derived_table: {
    explore_source: tickets {
      column: ticket_id {}
      column: id { field: ticket_comment.id }
      column: created_date {}
      column: comment_created_time { field: ticket_comment.comment_created_time }
      column: status {}
      column: subject {}
      column: product {}
      column: cloud_platform {}
      column: priority {}
      column: rating {}
      column: name { field: users.name }
      column: rating_comment {}
      column: pod { field: users.pod }
      column: region { field: users.region }
      column: customer_name { field: tell_me_more_ticket_effort.customer_name }
      column: customer_segment { field: tell_me_more_ticket_effort.customer_segment }
      column: requester_name {}
      column: requester_email {}
      column: requester_region {}
      column: is_get_doer_request { field: tell_me_more_ticket_effort.is_get_doer_request }
      column: is_escalated {}
      column: is_getcre {}
      column: requester_is_from_doit {}
      column: was_ticket_autosolved {}
      column: is_public {}
      column: ticket_is_pss { field: tell_me_more_ticket_effort.ticket_is_pss }
      column: commenter_is_doit_employee { field: ticket_comment.commenter_is_doit_employee }
      column: commenter_is_doit_support_bot { field: ticket_comment.commenter_is_doit_support_bot }
      column: public { field: ticket_comment.public }
      column: commenter_name { field: ticket_comment.commenter_name }
      column: body { field: ticket_comment.body }
      column: rating_is_bad_count {}
      column: rating_is_good_count {}
      column: rating_is_good_percentage {}
      column: rating_is_not_offered_count {}
      column: rating_is_offered_count {}
      column: rating_is_offered_percentage {}
      column: average_solve_time_days {}
      column: average_first_response_time_hours {}
      column: first_response_time_miss_count {}
      column: average_solve_time_hours {}
      column: average_first_response_time_minutes {}
      column: average_customer_mrr {}
      column: count {}
      column: comment_count { field: ticket_comment.comment_count }
      filters: {
        field: tickets.created_date
        value: "after 2022/09/09"
      }
    }
  }
  dimension: ticket_id {
    description: "Ticket ID"
    value_format: "0"
    type: number
  }
  dimension: id {
    description: ""
    type: number
  }
  dimension: created_date {
    description: "Ticket creation timestamp in UTC"
    type: date
  }
  dimension: comment_created_time {
    description: ""
    type: date_time
  }
  dimension: status {
    description: "The current status of a ticket (e.g. 'Open', 'Pending', 'Solved', 'On-Hold', 'New', 'Closed')"
  }
  dimension: subject {
    description: "The subject for a ticket"
  }
  dimension: product {
    description: "The product corresponding to a ticket"
  }
  dimension: cloud_platform {
    description: "The cloud platform for a ticket"
  }
  dimension: priority {
    description: "The ticket's priority"
  }
  dimension: rating {
    description: "The Good/Bad (or Offered) rating given to a ticket by the requester/customer"
  }
  dimension: name {
    label: "Agent Users Name"
    description: "Name of a user"
  }
  dimension: rating_comment {
    description: "The comment the requester/customer left when rating the ticket"
  }
  dimension: pod {
    label: "Agent Users Pod"
    description: "The pod associated with a DoiT user"
  }
  dimension: region {
    label: "Agent Users Region"
    description: "The user's region based on their Zendesk user time zone being mapped to a region. Note that this will likely change when an agent travels outside of his home time zone; it is generally recommended to use 'pod_region' instead."
  }
  dimension: customer_name {
    description: ""
  }
  dimension: customer_segment {
    description: ""
  }
  dimension: requester_name {
    description: "The name of the requester/customer who created a ticket."
  }
  dimension: requester_email {
    description: "The email of the requester/customer who created a ticket"
  }
  dimension: requester_region {
    description: "The region of the requester/customer who created a ticket. This determination is made by mapping their Zendesk user's timezone, which originates from the timezone their browser reports, to a region."
  }
  dimension: is_get_doer_request {
    label: "Tell Me More Ticket Effort Is Get Doer Request (Yes / No)"
    description: ""
    type: yesno
  }
  dimension: is_escalated {
    label: "Tickets Is Escalated (Yes / No)"
    description: "Was the ticket escalated?"
    type: yesno
  }
  dimension: is_getcre {
    label: "Tickets Is Getcre (Yes / No)"
    description: "Is the ticket a getCRE?"
    type: yesno
  }
  dimension: requester_is_from_doit {
    label: "Tickets Requester Is From Doit (Yes / No)"
    description: "Whether or not the requester who created a ticket is from DoiT. DoiT-initiated tickets are often seen with internal app testing, for example."
    type: yesno
  }
  dimension: was_ticket_autosolved {
    label: "Tickets Was Ticket Autosolved (Yes / No)"
    description: "Was the ticket auto-solved?"
    type: yesno
  }
  dimension: is_public {
    label: "Tickets Is Public (Yes / No)"
    description: "Is this a public ticket? (Not commonly used in analytics)"
    type: yesno
  }
  dimension: ticket_is_pss {
    label: "Tell Me More Ticket Effort Ticket Is Pss (Yes / No)"
    description: ""
    type: yesno
  }
  dimension: commenter_is_doit_employee {
    label: "Ticket Comment Commenter Is Doit Employee (Yes / No)"
    description: ""
    type: yesno
  }
  dimension: commenter_is_doit_support_bot {
    label: "Ticket Comment Commenter Is Doit Support Bot (Yes / No)"
    description: ""
    type: yesno
  }
  dimension: public {
    label: "Ticket Comment Public (Yes / No)"
    description: ""
    type: yesno
  }
  dimension: commenter_name {
    description: ""
  }
  dimension: body {
    description: ""
  }
  dimension: rating_is_bad_count {
    description: "The count of tickets with a Bad rating"
    type: number
  }
  dimension: rating_is_good_count {
    description: "The count of tickets with a Good rating"
    type: number
  }
  dimension: rating_is_good_percentage {
    description: "The percentage of rated tickets that were rated good"
    value_format: "0.00%"
    type: number
  }
  dimension: rating_is_not_offered_count {
    description: "The count of tickets with a Good or Bad rating (aka not Offered). Can be used to determine for example the % of tickets where a customer responded"
    type: number
  }
  dimension: rating_is_offered_count {
    description: "The count of tickets with an Offered rating (aka not Good or Bad). Can be used to determine for example the % of tickets where a customer did not respond"
    type: number
  }
  dimension: rating_is_offered_percentage {
    description: "The percentage of tickets that were rated vs. not rated ('Offered' rating vs. 'Good' or 'Bad' rating)"
    value_format: "0.00%"
    type: number
  }
  dimension: average_solve_time_days {
    description: "The average number of days it took to solve a ticket"
    value_format: "0.0"
    type: number
  }
  dimension: average_first_response_time_hours {
    description: "The average first response time on tickets in hours"
    value_format: "0.0"
    type: number
  }
  dimension: first_response_time_miss_count {
    description: ""
    type: number
  }
  dimension: average_solve_time_hours {
    description: "The average number of hours it took to solve a ticket"
    value_format: "0.0"
    type: number
  }
  dimension: average_first_response_time_minutes {
    description: "The average first response time on tickets in minutes"
    value_format: "0.0"
    type: number
  }
  dimension: average_customer_mrr {
    description: "The average value observed among customers' Monthly Recurring Revenue (MRR)"
    value_format: "$#,##0"
    type: number
  }
  dimension: count {
    description: ""
    type: number
  }
  dimension: comment_count {
    description: ""
    type: number
  }
}


SELECT
    tickets.id  AS tickets_ticket_id,
    ticket_comment.id  AS ticket_comment_id,
        (DATE(tickets.created_at )) AS tickets_created_date,
        (FORMAT_TIMESTAMP('%F %T', ticket_comment.comment_created_at )) AS ticket_comment_comment_created_time,
    tickets.status  AS tickets_status,
    tickets.subject  AS tickets_subject,
    tickets.product  AS tickets_product,
    tickets.platform  AS tickets_cloud_platform,
    tickets.priority  AS tickets_priority,
    tickets.rating  AS tickets_rating,
    users.name  AS users_name,
    tickets.rating_comment  AS tickets_rating_comment,
    users.custom_agent_team  AS users_pod,
    users.region  AS users_region,
    tell_me_more_ticket_effort.customer_name  AS tell_me_more_ticket_effort_customer_name,
    tell_me_more_ticket_effort.customer_segment  AS tell_me_more_ticket_effort_customer_segment,
    tickets.requester_name  AS tickets_requester_name,
    tickets.requester_email  AS tickets_requester_email,
    tickets.requester_region  AS tickets_requester_region,
        (CASE WHEN tell_me_more_ticket_effort.is_get_doer_request  THEN 'Yes' ELSE 'No' END) AS tell_me_more_ticket_effort_is_get_doer_request,
        (CASE WHEN tickets.is_escalated  THEN 'Yes' ELSE 'No' END) AS tickets_is_escalated,
        (CASE WHEN tickets.is_getcre  THEN 'Yes' ELSE 'No' END) AS tickets_is_getcre,
        (CASE WHEN tickets.requester_is_from_doit  THEN 'Yes' ELSE 'No' END) AS tickets_requester_is_from_doit,
        (CASE WHEN tickets.was_ticket_autosolved  THEN 'Yes' ELSE 'No' END) AS tickets_was_ticket_autosolved,
        (CASE WHEN tickets.is_public  THEN 'Yes' ELSE 'No' END) AS tickets_is_public,
        (CASE WHEN tell_me_more_ticket_effort.ticket_is_pss  THEN 'Yes' ELSE 'No' END) AS tell_me_more_ticket_effort_ticket_is_pss,
        (CASE WHEN ticket_comment.commenter_is_doit_employee  THEN 'Yes' ELSE 'No' END) AS ticket_comment_commenter_is_doit_employee,
        (CASE WHEN ticket_comment.commenter_is_doit_support_bot  THEN 'Yes' ELSE 'No' END) AS ticket_comment_commenter_is_doit_support_bot,
        (CASE WHEN ticket_comment.public  THEN 'Yes' ELSE 'No' END) AS ticket_comment_public,
    ticket_comment.commenter_name  AS ticket_comment_commenter_name,
    ticket_comment.body  AS ticket_comment_body,
    ROUND(COALESCE(CAST( ( SUM(DISTINCT (CAST(ROUND(COALESCE( tickets.rating_is_bad  ,0)*(1/1000*1.0), 9) AS NUMERIC) + (cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001 )) - SUM(DISTINCT (cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001) )  / (1/1000*1.0) AS NUMERIC), 0), 6) AS tickets_rating_is_bad_count,
    ROUND(COALESCE(CAST( ( SUM(DISTINCT (CAST(ROUND(COALESCE( tickets.rating_is_good  ,0)*(1/1000*1.0), 9) AS NUMERIC) + (cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001 )) - SUM(DISTINCT (cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001) )  / (1/1000*1.0) AS NUMERIC), 0), 6) AS tickets_rating_is_good_count,
    count(DISTINCT CASE WHEN  tickets.rating_is_good   = 1 THEN  tickets.id   END) / NULLIF(( ROUND(COALESCE(CAST( ( SUM(DISTINCT (CAST(ROUND(COALESCE(tickets.rating_is_good + tickets.rating_is_bad ,0)*(1/1000*1.0), 9) AS NUMERIC) + (cast(cast(concat('0x', substr(to_hex(md5(CAST(tickets.id  AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST(tickets.id  AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001 )) - SUM(DISTINCT (cast(cast(concat('0x', substr(to_hex(md5(CAST(tickets.id  AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST(tickets.id  AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001) )  / (1/1000*1.0) AS NUMERIC), 0), 6) ), 0)  AS tickets_rating_is_good_percentage,
    ROUND(COALESCE(CAST( ( SUM(DISTINCT (CAST(ROUND(COALESCE( tickets.rating_is_good   +  tickets.rating_is_bad    ,0)*(1/1000*1.0), 9) AS NUMERIC) + (cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001 )) - SUM(DISTINCT (cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001) )  / (1/1000*1.0) AS NUMERIC), 0), 6) AS tickets_rating_is_not_offered_count,
    ROUND(COALESCE(CAST( ( SUM(DISTINCT (CAST(ROUND(COALESCE( tickets.rating_is_offered  ,0)*(1/1000*1.0), 9) AS NUMERIC) + (cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001 )) - SUM(DISTINCT (cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001) )  / (1/1000*1.0) AS NUMERIC), 0), 6) AS tickets_rating_is_offered_count,
    count(DISTINCT CASE WHEN  tickets.rating_is_offered   = 0 THEN  tickets.id   END) / count(DISTINCT  tickets.id  )  AS tickets_rating_is_offered_percentage,
    (ROUND(COALESCE(CAST( ( SUM(DISTINCT (CAST(ROUND(COALESCE( tickets.time_to_solve_days  ,0)*(1/1000*1.0), 9) AS NUMERIC) + (cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001 )) - SUM(DISTINCT (cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001) )  / (1/1000*1.0) AS NUMERIC), 0), 6) / NULLIF(CAST(COUNT(DISTINCT CASE WHEN   tickets.time_to_solve_days   IS NOT NULL THEN  tickets.id   ELSE NULL END) AS FLOAT64), 0.0)) AS tickets_average_solve_time_days,
    (ROUND(COALESCE(CAST( ( SUM(DISTINCT (CAST(ROUND(COALESCE( ( tickets.first_response_time_minutes / 60  )  ,0)*(1/1000*1.0), 9) AS NUMERIC) + (cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001 )) - SUM(DISTINCT (cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001) )  / (1/1000*1.0) AS NUMERIC), 0), 6) / NULLIF(CAST(COUNT(DISTINCT CASE WHEN   ( tickets.first_response_time_minutes / 60  )   IS NOT NULL THEN  tickets.id   ELSE NULL END) AS FLOAT64), 0.0)) AS tickets_average_first_response_time_hours,
    COUNT(DISTINCT CASE
          WHEN  tickets.priority_original   = 'urgent' AND  tickets.first_response_time_minutes   > 30 THEN  tickets.id
          WHEN  tickets.priority_original   = 'high' AND  tickets.first_response_time_minutes   > 120 THEN  tickets.id
          WHEN  tickets.priority_original   = 'normal' AND  tickets.first_response_time_minutes   > 240 THEN  tickets.id
          WHEN  tickets.priority_original   = 'low' AND  tickets.first_response_time_minutes   > 480 THEN  tickets.id
          ELSE NULL
        END ) AS tickets_first_response_time_miss_count,
    (ROUND(COALESCE(CAST( ( SUM(DISTINCT (CAST(ROUND(COALESCE( tickets.time_to_solve_hours  ,0)*(1/1000*1.0), 9) AS NUMERIC) + (cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001 )) - SUM(DISTINCT (cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001) )  / (1/1000*1.0) AS NUMERIC), 0), 6) / NULLIF(CAST(COUNT(DISTINCT CASE WHEN   tickets.time_to_solve_hours   IS NOT NULL THEN  tickets.id   ELSE NULL END) AS FLOAT64), 0.0)) AS tickets_average_solve_time_hours,
    (ROUND(COALESCE(CAST( ( SUM(DISTINCT (CAST(ROUND(COALESCE( tickets.first_response_time_minutes  ,0)*(1/1000*1.0), 9) AS NUMERIC) + (cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001 )) - SUM(DISTINCT (cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001) )  / (1/1000*1.0) AS NUMERIC), 0), 6) / NULLIF(CAST(COUNT(DISTINCT CASE WHEN   tickets.first_response_time_minutes   IS NOT NULL THEN  tickets.id   ELSE NULL END) AS FLOAT64), 0.0)) AS tickets_average_first_response_time_minutes,
    (ROUND(COALESCE(CAST( ( SUM(DISTINCT (CAST(ROUND(COALESCE( tickets.customer_mrr  ,0)*(1/1000*1.0), 9) AS NUMERIC) + (cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001 )) - SUM(DISTINCT (cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 1, 15)) as int64) as numeric) * 4294967296 + cast(cast(concat('0x', substr(to_hex(md5(CAST( tickets.id   AS STRING))), 16, 8)) as int64) as numeric)) * 0.000000001) )  / (1/1000*1.0) AS NUMERIC), 0), 6) / NULLIF(CAST(COUNT(DISTINCT CASE WHEN   tickets.customer_mrr   IS NOT NULL THEN  tickets.id   ELSE NULL END) AS FLOAT64), 0.0)) AS tickets_average_customer_mrr,
    COUNT(DISTINCT tickets.id ) AS tickets_count,
    COUNT(DISTINCT ticket_comment.id ) AS ticket_comment_comment_count
FROM `looker_malloy_views.tickets` AS tickets
LEFT JOIN `looker_malloy_views.ticket_comment`
     AS ticket_comment ON tickets.id = ticket_comment.ticket_id
INNER JOIN `looker_malloy_views.tmm_ticket_data_view`
     AS tell_me_more_ticket_effort ON tickets.id = tell_me_more_ticket_effort.ticket_id
INNER JOIN `looker_malloy_views.users`
     AS users ON tickets.agent_user_id = users.id
WHERE (tickets.created_at ) >= (TIMESTAMP('2022-09-09 00:00:00'))
GROUP BY
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31
ORDER BY
    3 DESC
LIMIT 5000

